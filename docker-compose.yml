services:
  algorand-node:
    build: .
    image: algorand-node
    container_name: algorand-node
    hostname: algorand-node
    restart: unless-stopped
    ports:
      # - "4190:8080"  # Algorand Node API
      # - "4191:7833"  # Algorand kmd API
      - "38086:38086" # Expose publicly for P2P node participation
    volumes:
      - type: bind
        source: ./data
        target: /algod/data
        consistency: delegated
      - type: volume
        source: algorand-logs
        target: /algod/logs
        consistency: delegated
    secrets:
      - ACCOUNT_MNEMONIC
      - ALGOD_TOKEN
      - WALLET_NAME
      - WALLET_PASSWORD
    environment:
      ALGOD_ADDRESS: "http://0.0.0.0:8080"  # Use container-wide accessible address
      NETWORK: "mainnet"
      # START_KMD: 1
      # TELEMETRY_NAME: algomon-algonode
      TOKEN: 17325eb71851bc539a923d7c5171d64073c314a0dd1e4a613d1c82fb91baf277
      ADMIN_TOKEN: 17325eb71851bc539a923d7c5171d64073c314a0dd1e4a613d1c82fb91baf277
      KMD_TOKEN: 17325eb71851bc539a923d7c5171d64073c314a0dd1e4a613d1c82fb91baf277
      # FAST_CATCHUP: 1
    networks:
      - algorand-network

  # algomon-prometheus:
  #   image: prom/prometheus:main
  #   container_name: algomon-prometheus
  #   hostname: algomon-prometheus
  #   build:
  #     context: ./prometheus
  #     tags:
  #       - "algomon/prometheus:main"
  #   restart: always
  #   networks:
  #     - algorand-network
  #   # ports:
  #   #   - "9090:9090"
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
  #     - ./prometheus/metrics-sources.yaml:/etc/prometheus/metrics-sources.yaml:ro
  #     - ./prometheus/data:/prometheus
  #   healthcheck:
  #     test: wget -qO- http://localhost:9090/-/healthy | grep -q "Healthy"
  #     retries: 5
  #     start_period: 15s
  #     timeout: 10s

  # algomon-elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
  #   container_name: algomon-elasticsearch
  #   hostname: algomon-elasticsearch
  #   build:
  #     context: ./elasticsearch
  #     tags:
  #       - "algomon/elasticsearch:8.17.1"
  #   user: elasticsearch
  #   restart: always
  #   networks:
  #     - algorand-network
  #   # ports:
  #   #   - "9200:9200"
  #   volumes:
  #     - ./elasticsearch/data:/usr/share/elasticsearch/data
  #     - ./elasticsearch/elasticsearch.yaml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
  #     - ./elasticsearch/setup-es.sh:/setup-es.sh:ro
  #   environment:
  #     - discovery.type=single-node
  #     - ELASTIC_PASSWORD=elastic
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   entrypoint: >
  #     /bin/sh -c '
  #     /usr/local/bin/docker-entrypoint.sh elasticsearch &
  #     sleep 10 && /setup-es.sh &
  #     wait
  #     '
  #   healthcheck:
  #     test: curl -s http://localhost:9200/_cat/health | grep -q "green\|yellow"
  #     retries: 5
  #     start_period: 15s
  #     timeout: 10s
  
  # # algomon-api-caller:
  #   image: ubuntu:latest
  #   container_name: algomon-api-caller
  #   hostname: algomon-api-caller
  #   build:
  #     context: ./api-caller
  #     tags:
  #       - "algomon/api-caller:latest"
  #   restart: always
  #   tty: true
  #   networks:
  #     - algorand-network
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   depends_on:
  #     algomon-elasticsearch:
  #       condition: "service_healthy"
  #   volumes:
  #     - ./api-caller/algonode-api-origin.yaml:/etc/algomon/api-caller/algonode-api-origin.yaml:ro
  #     - ./api-caller/algonode-api-endpoint.yaml:/etc/algomon/api-caller/algonode-api-endpoint.yaml:ro
  #     - ./api-caller/algonode-api-caller.sh:/etc/algomon/api-caller/algonode-api-caller.sh:ro
  #   healthcheck:
  #     test: ps -o user,pid,start,cmd | grep -q "cron"
  #     retries: 5
  #     start_period: 15s
  #     timeout: 10s

# Note: on Linux, in the dokcer root, under folder ./grafana, grant write permissions via $ chmod -R o+w *
  algomon-grafana:
    image: grafana/grafana:latest
    container_name: algomon-grafana
    hostname: algomon-grafana
    build:
      context: ./grafana
      tags:
        - "algomon/grafana:latest"
    restart: always
    networks:
      - algorand-network
    # ports:
    #   - "3000:3000"
    depends_on:
      algomon-prometheus:
        condition: "service_healthy"
      algomon-elasticsearch:
        condition: "service_healthy"
      algomon-api-caller:
        condition: "service_healthy"
    user: "472:472" # This is Grafana's default user:group
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/maps:/usr/share/grafana/public/maps:ro
      - ./grafana/dashboard-provider.yaml:/etc/grafana/provisioning/dashboards/default.yaml:ro
      - ./grafana/datasource-manifest.yaml:/etc/grafana/provisioning/datasources/default.yaml:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=AlgoMon
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=my-email-address@gmail.com
      - GF_SMTP_PASSWORD=my-password
      - GF_SMTP_FROM_ADDRESS=my-email-address@gmail.com
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_HIDE_VERSION=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
      - GF_ENABLE_GZIP=true
      - GF_USERS_DEFAULT_THEME=dark
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/algomon.json
      - GF_INSTALL_PLUGINS=grafana-opensearch-datasource
    healthcheck:
      test: curl -s http://localhost:3000/api/health | grep -q "ok"
      retries: 5
      start_period: 15s
      timeout: 10s

  Wireguard:
    image: linuxserver/wireguard:latest
    container_name: Wireguard
    hostname: WireguardG
    entrypoint: ["/init"]
    privileged: true
    ports:
      - "51820:51820/udp"
    volumes:
      - "$HOME/DATA/Wireguard/config:/config"
    environment:
      - "PGID=1000"
      - "SERVERPORT=51820"
      - "INTERNAL_SUBNET=172.3.0.0/24"
      - "PEERS=10"
      - "PEERDNS=1.1.1.1"
      - "TZ=Europe/Rome"
      - "PUID=1000"
      - "PATH=/lsiopy/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - "HOME=/root"
      - "TERM=xterm"
      - "VIRTUAL_ENV=/lsiopy"
      - "LSIO_FIRST_PARTY=true"
    networks:
      - algorand-network

volumes:
  algorand-data:
    driver: local
  algorand-logs:
    driver: local
  # grafana-data:
  #   driver: local

secrets:
  ACCOUNT_MNEMONIC:
    file: ./secrets/ACCOUNT_MNEMONIC  # Replace with actual path to your secret file
  ALGOD_TOKEN:
    file: ./secrets/ALGOD_TOKEN       # Replace with actual path to your secret file
  WALLET_NAME:
    file: ./secrets/WALLET_NAME       # Replace with actual path to your secret file
  WALLET_PASSWORD:
    file: ./secrets/WALLET_PASSWORD   # Replace with actual path to your secret file

networks:
  algorand-network:
    driver: bridge